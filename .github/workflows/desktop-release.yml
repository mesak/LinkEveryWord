name: Desktop App Release

on:
  push:
    tags:
      - 'desktop-v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release (Windows)
    runs-on: windows-latest

    env:
      PYTHONUTF8: '1'
      WORKING_DIR: desktop-app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Update Version Info from Tag
        id: version-updater
        shell: pwsh
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          $tag = "${{ github.ref_name }}"
          if ($tag -match '^desktop-v(\d+\.\d+\.\d+)$') {
            $version = $matches[1]
            $fileVersion = "$version.0"
            $filevers_tuple = "($($version.Replace('.', ', ')), 0)"

            $version_file = "version_info.txt"
            $content = Get-Content $version_file -Raw
            $content = $content -replace "filevers=\(1, 0, 0, 0\)", "filevers=$filevers_tuple"
            $content = $content -replace "prodvers=\(1, 0, 0, 0\)", "prodvers=$filevers_tuple"
            $content = $content -replace "StringStruct\(u'FileVersion', u'1.0.0.0'\)", "StringStruct(u'FileVersion', u'$fileVersion')"
            $content = $content -replace "StringStruct\(u'ProductVersion', u'1.0.0.0'\)", "StringStruct(u'ProductVersion', u'$fileVersion')"

            Set-Content -Path $version_file -Value $content -Encoding UTF8
            echo "version=$version" >> $env:GITHUB_OUTPUT
          } else {
            echo "Tag format is not correct. Expected desktop-vX.Y.Z"
            exit 1
          }

      - name: Install build dependencies
        shell: pwsh
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build with PyInstaller
        shell: pwsh
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m PyInstaller --clean app_standalone.spec

      - name: Prepare release artifacts
        id: prep
        shell: pwsh
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          $version = "${{ steps.version-updater.outputs.version }}"
          $zipName = "EverythingFlaskSearch-v$version-win64.zip"
          Compress-Archive -Path "dist/EverythingFlaskSearch.exe", "README.md" -DestinationPath $zipName -Force
          echo "zip_name=$zipName" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Desktop App v${{ steps.version-updater.outputs.version }}
          body: |
            ## LinkEveryWord Desktop App v${{ steps.version-updater.outputs.version }}

            This is an automated release of the LinkEveryWord desktop application.
            The zip file contains the executable and the README file.
          draft: false
          prerelease: false
          files: ${{ env.WORKING_DIR }}/${{ steps.prep.outputs.zip_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
