// Sync chrome-extension/privacy-policy.md into web/src/content/privacy.ts
import { readFile, writeFile, mkdir, copyFile, access } from 'node:fs/promises'
import { dirname, resolve } from 'node:path'
import { fileURLToPath } from 'node:url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

async function main() {
  const root = resolve(__dirname, '../..')
  const base = resolve(root, 'web', 'content')
  const mdZhPath = resolve(base, 'privacy-policy.md')
  const mdEnPath = resolve(base, 'privacy-policy.en.md')
  const outDir = resolve(root, 'web', 'src', 'content')
  await mkdir(outDir, { recursive: true })

  async function generate(mdPath, outName) {
    const md = await readFile(mdPath, 'utf8')
    const safe = md.replace(/`/g, '\\`').replace(/\$\{/g, '\\${')
    const outTsPath = resolve(outDir, outName)
    const ts = `// Auto-generated by scripts/sync-privacy.mjs\nconst privacy = \`${safe}\`\nexport default privacy\n`
    await writeFile(outTsPath, ts, 'utf8')
    console.log('Synced privacy policy to', outTsPath)
  }

  // Prefer bilingual if provided; otherwise fall back to single file as zh
  let zhOk = false
  try {
    await access(mdZhPath)
    await generate(mdZhPath, 'privacy.zh.ts')
    zhOk = true
  } catch {}
  let enOk = false
  try {
    await access(mdEnPath)
    await generate(mdEnPath, 'privacy.en.ts')
    enOk = true
  } catch {}
  if (zhOk && !enOk) {
    // fallback: use zh content for en when en is missing
    await generate(mdZhPath, 'privacy.en.ts')
  }
  if (!zhOk && !enOk) {
    // legacy fallback to single file
    const legacy = resolve(base, 'privacy-policy.md')
    await generate(legacy, 'privacy.ts')
  }

  // Copy shared image into web assets if available
  const sharedImg = resolve(root, 'shared', 'image.png')
  const outImg = resolve(root, 'web', 'assets', 'image.png')
  try {
    await mkdir(dirname(outImg), { recursive: true })
    await access(sharedImg)
    await copyFile(sharedImg, outImg)
    console.log('Copied shared image to', outImg)
  } catch (e) {
    console.log('shared/image.png not found, skip copy')
  }

  // Copy SVG logo to assets if available
  const sharedLogo = resolve(root, 'shared', 'app_icon.svg')
  const outLogo = resolve(root, 'web', 'assets', 'logo.svg')
  try {
    await mkdir(dirname(outLogo), { recursive: true })
    await access(sharedLogo)
    await copyFile(sharedLogo, outLogo)
    console.log('Copied shared logo to', outLogo)
  } catch (e) {
    console.log('shared/app_icon.svg not found, skip copy')
  }
}

main().catch((err) => {
  console.error(err)
  process.exitCode = 1
})
